/*****************************************************
 * Copyright Grégory Mounié 2008-2013                *
 *           Simon Nieuviarts 2002-2009              *
 * This code is distributed under the GLPv3 licence. *
 * Ce code est distribué sous la licence GPLv3+.     *
 *****************************************************/

#include <sys/wait.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "variante.h"
#include "readcmd.h"

#ifndef VARIANTE
#error "Variante non défini !!"
#endif

/*
 * Structure de liste de processus
 */
typedef struct process_cell {
	int pid;
	char** argv;
	struct process_cell* next;
} ProcessCell;

/**
 * Imprime un tableau de chaines de caractères
 */
void printStringArray(char** stringArray, char* separator) {
	if (stringArray[0] == NULL) {
		printf("Empty array");
	} else {
		printf("%s", stringArray[0]);
		int i = 1;
		while (stringArray[i] != NULL) {
			printf("%s%s", separator, stringArray[i]);
			i++;
		}
	}
}

/*
 * Duplique une chaine de caractères
 */
char** copyStringArray(char** stringArray) {
	int nb = 0;
	while (stringArray[nb] != NULL) {
		nb++;
	}
	char** res = malloc((nb + 1) * sizeof(char*));
	int i = 0;
	while (stringArray[i] != NULL) {
		res[i] = malloc(sizeof(char) * strlen(stringArray[i]));
		strcpy(res[i], stringArray[i]);
		i++;
	}
	res[i] = NULL;
	return res;
}

/*
 * Ajoute une cellule en tête de la liste.
 */
void add(ProcessCell** list, int pid, char** argv) {
	ProcessCell* newCell = malloc(sizeof(ProcessCell));
	newCell->pid = pid;
	newCell->argv = argv;
	newCell->next = NULL;
	if (*list == NULL) {
		*list = newCell;
	} else {
		newCell->next = *list;
		*list = newCell;
	}
}

/*
 * Imprime la liste des jobs en supprimant les jobs morts.
 */
void print(ProcessCell** list) {
	if (*list == NULL) {
		printf("Aucun job en cours\n");
		return;
	}
	ProcessCell* prev = NULL;
	ProcessCell* cell = *list;
	printf("  PID  | Status | Command\n");
	printf("-------+--------+------------------------------------------\n");
	do {
		int delete = 0;
		int res = waitpid(cell->pid, NULL, WNOHANG);
		printf("  %d | ", cell->pid);
		if (res == 0) {
			printf("  OK   | ");
		} else {
			delete = 1;
			printf(" DEAD  | ");
		}
		printStringArray(cell->argv, " ");
		printf("\n-------+--------+------------------------------------------\n");
		if (delete) {
			if (prev == NULL) {
				*list = cell->next;
				free(cell->argv);
				free(cell);
				cell = *list;
			} else {
				prev->next = cell->next;
				free(cell->argv);
				free(cell);
				cell = prev->next;
			}
		} else {
			prev = cell;
			cell = cell->next;
		}
	} while (cell != NULL);
}

// ########## //
// ## Main ## //
// ########## //

int main() {
	printf("Variante %d: %s\n", VARIANTE, VARIANTE_STRING);

	ProcessCell** jobs = malloc(sizeof(ProcessCell*));

	while (1) {
		struct cmdline *l;
		int i;
		char *prompt = "ensishell>";

		l = readcmd(prompt);

		// Si l'input est fermé, on clos le programme
		if (!l) {
			printf("exit\n");
			exit(EXIT_SUCCESS);
		}

		if (l->err) {
			// Erreur de syntaxe, commande suivante
			printf("error: %s\n", l->err);
			continue;
		}

		if (!l->seq[0]) {
			// Aucune commande entrée
			continue;
		}

		///////////
		// DEBUG //
		///////////

		if (l->in) {
			printf("in: %s\n", l->in);
		}

		if (l->out) {
			printf("out: %s\n", l->out);
		}

		if (l->bg) {
			printf("background (&)\n");
		}

		// Affiche chaque commande
		for (i = 0; l->seq[i] != 0; i++) {
			char** cmd = l->seq[i];
			printf("seq[%d]: ", i);
			printStringArray(cmd, " ");
			printf("\n");
		}

		printf("\n");

		///////////////
		// FIN DEBUG //
		///////////////

		// Jobs command
		if (strcmp(l->seq[0][0], "jobs") == 0) {
			print(jobs);
			continue;
		}

		// Input & Output
		int stdinFd = dup(0);
		int stdoutFd = dup(1);
		int inFd = stdinFd;
		int outFd = stdoutFd;
		if (l->in != NULL) {
			inFd = open(l->in, O_RDONLY);
			if (inFd == -1) {
				printf("Failed to open file in read mode: %s\n", l->in);
				continue;
			}
			dup2(inFd, 0);
		}
		if (l->out != NULL) {
			outFd = open(l->out, O_WRONLY|O_CREAT, S_IRWXU);
			if (outFd == -1) {
				printf("Failed to open/create file in write mode: %s\n", l->out);
				continue;
			}
			dup2(outFd, 1);
		}

		int pipefd[2] = {inFd, outFd};
		if (pipe(pipefd) == -1) {
			perror("pipe failed");
			exit(EXIT_FAILURE);
		}

		int res;
		for (i = 0; l->seq[i] != NULL; i++) {
			if (l->seq[i + 1] == NULL) {
				// Dans la dernière commande
				dup2(pipefd[0], 0);
				close(pipefd[0]);
				dup2(outFd, 1);
				close(outFd);
			} else {
				res = fork();
				if (res == -1) {
					perror("fork failed");
					exit(EXIT_FAILURE);
				} else if (res == 0) {

				} else if (i == 0) {
					break;
				} else {
					// Dans la commande i
				}
			}
			execvp(l->seq[i][0], l->seq[i]);
		}
/*
		// Fork
		int pipefd[2];
		if (pipe(pipefd) == -1) {
			perror("pipe failed: ");
			exit(EXIT_FAILURE);
		}
		int res = fork();
		if (res == -1) {
			perror("fork failed: ");
			exit(EXIT_FAILURE);
		} else if (res == 0) { // Dans le fils
			dup2(pipefd[1], 1);
			// Pipe
			close(pipefd[0]); close(pipefd[1]);

			// Appel d'execvp
			execvp(l->seq[0][0], l->seq[0]);

			// Code appelé uniquement si execvp retourne
			// == si execvp échoue
			perror("execvp failed: ");
			exit(EXIT_FAILURE);
		}

		int res2 = -42;
		if (l->seq[1] != NULL) {
			res2 = fork();
			if (res2 == 0) {
				dup2(pipefd[0], 0);
				close(pipefd[1]); close(pipefd[0]);
				execvp(l->seq[1][0], l->seq[1]);
				perror("execvp failed: ");
				exit(EXIT_FAILURE);
			}
		}

		close(pipefd[0]); close(pipefd[1]);
		if (inFd != stdinFd) {
			dup2(stdinFd, 0);
			close(stdinFd);
			close(inFd);
		}
		if (outFd != stdoutFd) {
			dup2(stdoutFd, 1);
			close(stdoutFd);
			close(outFd);
		}
*/
		// Dans le père
		if (!l->bg) {
			waitpid((pid_t)res, NULL, 0);
		} else {
			add(jobs, res, copyStringArray(l->seq[0]));
		}
		printf("\n");
	}
}

